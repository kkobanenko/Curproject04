"""
–û—Å–Ω–æ–≤–Ω–æ–µ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
"""

import logging
from typing import Any, Dict, List

import pandas as pd
import plotly.express as px
import streamlit as st
from config import settings
from database import clickhouse_manager, postgres_manager
from redis_queue import queue_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=settings.page_title,
    page_icon=settings.page_icon,
    layout="wide",
    initial_sidebar_state="expanded",
)

# CSS —Å—Ç–∏–ª–∏
st.markdown(
    """
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .status-success {
        color: #28a745;
        font-weight: bold;
    }
    .status-error {
        color: #dc3545;
        font-weight: bold;
    }
    .status-pending {
        color: #ffc107;
        font-weight: bold;
    }
</style>
""",
    unsafe_allow_html=True,
)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown(
        '<h1 class="main-header">üíä –ê–Ω–∞–ª–∏–∑ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤</h1>', unsafe_allow_html=True
    )

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üìä –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            ["üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîç –ò—Å—Ç–æ—Ä–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
    if page == "üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞":
        show_text_analysis_page()
    elif page == "üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π":
        show_news_search_page()
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()
    elif page == "üîç –ò—Å—Ç–æ—Ä–∏—è":
        show_history_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()


def show_text_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    st.header("üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")

    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
    with st.form("text_analysis_form"):
        st.subheader("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        text = st.text_area(
            "–¢–µ–∫—Å—Ç:", height=200, placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º..."
        )

        col1, col2 = st.columns(2)

        with col1:
            source_url = st.text_input(
                "URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", placeholder="https://example.com/article"
            )

        with col2:
            source_date = st.date_input("–î–∞—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", value=None)

        force_recheck = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞")

        submitted = st.form_submit_button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if submitted and text.strip():
        with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å..."):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            result = queue_manager.enqueue_text_analysis(
                text=text.strip(),
                source_url=source_url if source_url else None,
                source_date=source_date.isoformat() if source_date else None,
                force_recheck=force_recheck,
            )

            if result["status"] == "enqueued":
                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: {result['job_id']}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ session state
                st.session_state["current_job_id"] = result["job_id"]
                st.session_state["job_submitted"] = True

            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    if "current_job_id" in st.session_state and st.session_state.get("job_submitted"):
        st.subheader("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")

        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            st.rerun()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        job_status = queue_manager.get_job_status(st.session_state["current_job_id"])

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        progress_data = queue_manager.get_job_progress(st.session_state["current_job_id"])

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = job_status.get("status", "unknown")

        if status == "finished":
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            show_job_results(job_status.get("result", {}))
            st.session_state["job_submitted"] = False

        elif status == "failed":
            st.error("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            st.error(f"–û—à–∏–±–∫–∞: {job_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            st.session_state["job_submitted"] = False

        elif status == "started":
            st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            show_job_progress(progress_data)

        elif status == "queued":
            st.warning("‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏...")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if progress_data.get("status") != "not_found":
                show_job_progress(progress_data)

        else:
            st.info(f"üìã –°—Ç–∞—Ç—É—Å: {status}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if progress_data.get("status") != "not_found":
                show_job_progress(progress_data)


def show_job_progress(progress_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    if not progress_data or progress_data.get("status") == "not_found":
        st.info("üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    st.subheader("üîÑ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", progress_data.get("progress", "N/A"))

    with col2:
        st.metric("–¢–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π", progress_data.get("current_criterion", "N/A"))

    with col3:
        st.metric("–°—Ç–∞—Ç—É—Å", progress_data.get("status", "N/A"))

    # –¢–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π
    if "criterion_text" in progress_data:
        st.subheader("üìù –¢–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π")
        st.info(
            f"**{progress_data.get('current_criterion', 'N/A')}**: "
            f"{progress_data['criterion_text']}"
        )

    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if "current_result" in progress_data:
        result = progress_data["current_result"]
        st.subheader("ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Ollama")

        col1, col2, col3 = st.columns(3)

        with col1:
            match_status = "‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ" if result.get("is_match") else "‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            st.metric("–†–µ–∑—É–ª—å—Ç–∞—Ç", match_status)

        with col2:
            st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result.get('confidence', 0):.2f}")

        with col3:
            st.metric("–í—Ä–µ–º—è (–º—Å)", result.get("latency_ms", 0))

        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if "summary" in result and result["summary"]:
            st.subheader("üìÑ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            st.info(result["summary"])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        if "model_name" in result:
            st.caption(f"–ú–æ–¥–µ–ª—å: {result['model_name']}")


def show_job_results(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    if not result:
        st.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å", result.get("status", "N/A"))

    with col2:
        st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", result.get("total_events", 0))

    with col3:
        st.metric("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è", result.get("matches", 0))

    with col4:
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result.get('avg_confidence', 0):.2f}")

    # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π
    if "events" in result and result["events"]:
        st.subheader("üìù –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π")

        events_df = pd.DataFrame(result["events"])

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π
        st.dataframe(
            events_df[["criterion_id", "is_match", "confidence", "summary", "latency_ms"]],
            use_container_width=True,
        )

        # –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if len(events_df) > 1:
            fig = px.bar(
                events_df,
                x="criterion_id",
                y="confidence",
                color="is_match",
                title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                labels={"criterion_id": "–ö—Ä–∏—Ç–µ—Ä–∏–π", "confidence": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"},
            )
            st.plotly_chart(fig, use_container_width=True)


def show_news_search_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    st.header("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NewsService
    from news_service import NewsService

    news_service = NewsService()

    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    with st.form("news_search_form"):
        st.subheader("–ü–æ–∏—Å–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = st.text_input(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–∫ –ª–µ–≥–∫–∏—Ö, –¥–∏–∞–±–µ—Ç, COVID-19...",
            help="–í–≤–µ–¥–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π",
        )

        # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
        st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

        col1, col2, col3 = st.columns(3)

        with col1:
            pubmed_enabled = st.checkbox(
                "PubMed", value=True, help="–ü–æ–∏—Å–∫ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ PubMed"
            )

        with col2:
            biomcp_enabled = st.checkbox(
                "BioMCP", value=True, help="–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ BioMCP (—Å—Ç–∞—Ç—å–∏ –∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)"
            )

        with col3:
            web_search_enabled = st.checkbox("Web Search", value=True, help="–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        col1, col2 = st.columns(2)

        with col1:
            limit_per_source = st.number_input(
                "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫:",
                min_value=1,
                max_value=20,
                value=5,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
            )

        with col2:
            if st.form_submit_button("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏", use_container_width=True):
                if search_query.strip():
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    selected_sources = []
                    if pubmed_enabled:
                        selected_sources.append("pubmed")
                    if biomcp_enabled:
                        selected_sources.append("biomcp")
                    if web_search_enabled:
                        selected_sources.append("web_search")

                    if selected_sources:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                        with st.spinner("–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π..."):
                            try:
                                news_results = news_service.search_medical_news(
                                    query=search_query.strip(),
                                    sources=selected_sources,
                                    limit=limit_per_source,
                                )

                                if news_results:
                                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_results)} –Ω–æ–≤–æ—Å—Ç–µ–π")

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                    st.session_state["news_search_results"] = news_results
                                    st.session_state["news_search_query"] = search_query.strip()

                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                    show_news_search_results(news_results)
                                else:
                                    st.warning("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                    else:
                        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞")
                else:
                    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    if "news_search_results" in st.session_state:
        st.subheader("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        show_news_search_results(st.session_state["news_search_results"])


def show_news_search_results(news_results: List[Dict[str, Any]]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if not news_results:
        st.info("üì∞ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    sources = {}
    for news in news_results:
        source = news.get("source", "unknown")
        if source not in sources:
            sources[source] = []
        sources[source].append(news)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    for source, news_list in sources.items():
        st.subheader(f"üì∞ {source.upper()}")

        for news in news_list:
            with st.expander(f"üìÑ {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}", expanded=False):
                col1, col2 = st.columns([3, 1])

                with col1:
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ—Å—Ç–∏
                    st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {news.get('source', 'N/A')}")
                    st.write(f"**–î–∞—Ç–∞:** {news.get('created_at', 'N/A')}")

                    if news.get("url"):
                        st.write(f"**URL:** {news['url']}")

                    if news.get("content"):
                        st.write("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                        st.text(news["content"])

                with col2:
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    if news.get("url"):
                        st.link_button("üîó –ü–µ—Ä–µ–π—Ç–∏", news["url"], help="–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
                    st.button(
                        "üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞",
                        key=f"analyze_{news['id']}",
                        help="–ü–µ—Ä–µ–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                        disabled=True,
                    )


def show_statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    # –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    col1, col2 = st.columns(2)

    with col1:
        days = st.selectbox("–ü–µ—Ä–∏–æ–¥:", [7, 30, 90], index=1)

    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            st.rerun()

    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        criteria_stats = clickhouse_manager.get_criteria_stats(days)

        if criteria_stats:
            stats_df = pd.DataFrame(criteria_stats)

            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

            col1, col2, col3, col4 = st.columns(4)

            with col1:
                total_events = stats_df["total_events"].sum()
                st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", total_events)

            with col2:
                total_matches = stats_df["matches"].sum()
                match_rate = (total_matches / total_events * 100) if total_events > 0 else 0
                st.metric("–í—Å–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", f"{total_matches} ({match_rate:.1f}%)")

            with col3:
                avg_confidence = stats_df["avg_confidence"].mean()
                st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")

            with col4:
                avg_latency = stats_df["avg_latency_ms"].mean()
                st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)", f"{avg_latency:.0f}")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            st.subheader("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            display_df = stats_df.copy()
            display_df["match_rate"] = (
                display_df["matches"] / display_df["total_events"] * 100
            ).round(1)
            display_df = display_df.rename(
                columns={
                    "criterion_id": "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                    "total_events": "–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π",
                    "matches": "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è",
                    "match_rate": "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (%)",
                    "avg_confidence": "–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                    "avg_latency_ms": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)",
                }
            )

            st.dataframe(
                display_df[
                    [
                        "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                        "–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π",
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è",
                        "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (%)",
                        "–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)",
                    ]
                ],
                use_container_width=True,
            )

            # –ì—Ä–∞—Ñ–∏–∫–∏
            st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫–∏")
            col1, col2 = st.columns(2)

            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                fig1 = px.bar(
                    stats_df,
                    x="criterion_id",
                    y="total_events",
                    title="–°–æ–±—ã—Ç–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                    labels={"criterion_id": "–ö—Ä–∏—Ç–µ—Ä–∏–π", "total_events": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π"},
                    color="total_events",
                    color_continuous_scale="Blues",
                )
                fig1.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig1, use_container_width=True)

            with col2:
                # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                fig2 = px.bar(
                    stats_df,
                    x="criterion_id",
                    y="matches",
                    title="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                    labels={"criterion_id": "–ö—Ä–∏—Ç–µ—Ä–∏–π", "matches": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"},
                    color="matches",
                    color_continuous_scale="Greens",
                )
                fig2.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig2, use_container_width=True)

            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            fig3 = px.bar(
                stats_df,
                x="criterion_id",
                y=stats_df["matches"] / stats_df["total_events"] * 100,
                title="–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                labels={"criterion_id": "–ö—Ä–∏—Ç–µ—Ä–∏–π", "y": "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (%)"},
                color=stats_df["matches"] / stats_df["total_events"] * 100,
                color_continuous_scale="Viridis",
            )
            fig3.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig3, use_container_width=True)

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            daily_stats = clickhouse_manager.get_daily_stats(days)

            if daily_stats:
                daily_df = pd.DataFrame(daily_stats)
                daily_df["date"] = pd.to_datetime(daily_df["date"])

                st.subheader("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

                # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–Ω—è–º
                col1, col2, col3 = st.columns(3)

                with col1:
                    avg_daily_events = daily_df["total_events"].mean()
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å", f"{avg_daily_events:.1f}")

                with col2:
                    avg_daily_matches = daily_df["matches"].mean()
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –¥–µ–Ω—å", f"{avg_daily_matches:.1f}")

                with col3:
                    avg_daily_confidence = daily_df["avg_confidence"].mean()
                    st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_daily_confidence:.2f}")

                # –ì—Ä–∞—Ñ–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                fig4 = px.line(
                    daily_df,
                    x="date",
                    y=["total_events", "matches"],
                    title="–°–æ–±—ã—Ç–∏—è –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–Ω—è–º",
                    labels={"date": "–î–∞—Ç–∞", "value": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "variable": "–¢–∏–ø"},
                    markers=True,
                )
                fig4.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig4, use_container_width=True)

                # –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
                fig5 = px.line(
                    daily_df,
                    x="date",
                    y="avg_confidence",
                    title="–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º",
                    labels={"date": "–î–∞—Ç–∞", "avg_confidence": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"},
                    markers=True,
                )
                fig5.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig5, use_container_width=True)

        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        st.exception(e)


def show_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    st.header("üîç –ò—Å—Ç–æ—Ä–∏—è")

    # –ü–æ–¥–∑–∞–∫–ª–∞–¥–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    history_tab = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—Ä–∏–∏:", ["üìã –°–æ–±—ã—Ç–∏—è", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"])

    if history_tab == "üìã –°–æ–±—ã—Ç–∏—è":
        show_events_history()
    elif history_tab == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
        show_news_history()


def show_events_history():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        limit = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:", [10, 25, 50, 100], index=3)

    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
            st.rerun()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = clickhouse_manager.get_recent_events(limit)

        if events:
            events_df = pd.DataFrame(events)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            if "ingest_ts" in events_df.columns:
                events_df["ingest_ts"] = pd.to_datetime(events_df["ingest_ts"])

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            show_matches_only = st.checkbox("–¢–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")

            if show_matches_only:
                events_df = events_df[events_df["is_match"] == 1]

            if not events_df.empty:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = events_df.copy()
                display_df = display_df.rename(
                    columns={
                        "ingest_ts": "–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞",
                        "criterion_text": "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                        "is_match": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
                        "confidence": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                        "summary": "–†–µ–∑—É–ª—å—Ç–∞—Ç",
                    }
                )

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
                st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                (
                    header_col1,
                    header_col2,
                    header_col3,
                    header_col4,
                    header_col5,
                    header_col6,
                    header_col7,
                ) = st.columns([2, 3, 1, 1, 1, 1, 1])

                with header_col1:
                    st.write("**üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞**")
                with header_col2:
                    st.write("**üìù –ö—Ä–∏—Ç–µ—Ä–∏–π**")
                with header_col3:
                    st.write("**‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ**")
                with header_col4:
                    st.write("**üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å**")
                with header_col5:
                    st.write("**üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç**")
                with header_col6:
                    st.write("**üîó –ü–µ—Ä–µ–π—Ç–∏**")
                with header_col7:
                    st.write("**üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä**")

                st.divider()

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                for idx, row in display_df.iterrows():
                    with st.container():
                        col1, col2, col3, col4, col5, col6, col7 = st.columns([2, 3, 1, 1, 1, 1, 1])

                        with col1:
                            st.write(f"**{row['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞']}**")

                        with col2:
                            st.write(f"**{row['–ö—Ä–∏—Ç–µ—Ä–∏–π']}**")

                        with col3:
                            match_icon = "‚úÖ" if row["–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ"] else "‚ùå"
                            st.write(f"{match_icon}")

                        with col4:
                            st.write(f"{row['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']:.2f}")

                        with col5:
                            st.write(
                                f"{row['–†–µ–∑—É–ª—å—Ç–∞—Ç'][:50]}..."
                                if len(str(row["–†–µ–∑—É–ª—å—Ç–∞—Ç"])) > 50
                                else row["–†–µ–∑—É–ª—å—Ç–∞—Ç"]
                            )

                        with col6:
                            # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏" - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                            source_url = events_df.iloc[idx]["source_url"]
                            if source_url and source_url != "\\N":
                                st.link_button(
                                    "üîó –ü–µ—Ä–µ–π—Ç–∏", source_url, help="–û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
                                )
                            else:
                                st.write("‚Äî")

                        with col7:
                            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä" - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                            source_hash = events_df.iloc[idx]["source_hash"]
                            if st.button(
                                "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{idx}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                            ):
                                st.session_state[f"show_text_{idx}"] = True

                        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞
                        if st.session_state.get(f"show_text_{idx}", False):
                            with st.expander(
                                f"üìÑ –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ {idx + 1})", expanded=True
                            ):
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —Ö–µ—à—É
                                    source_data = postgres_manager.get_source_by_hash(source_hash)
                                    if source_data and source_data.get("text"):
                                        st.text_area(
                                            "–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
                                            value=source_data["text"],
                                            height=300,
                                            disabled=True,
                                        )

                                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                        col_info1, col_info2 = st.columns(2)
                                        with col_info1:
                                            if source_data.get("url"):
                                                st.write(f"**URL:** {source_data['url']}")
                                        with col_info2:
                                            if source_data.get("date"):
                                                st.write(f"**–î–∞—Ç–∞:** {source_data['date']}")
                                    else:
                                        st.warning("üìÑ –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

                                except Exception as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

                                # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                                if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key=f"close_{idx}"):
                                    st.session_state[f"show_text_{idx}"] = False
                                    st.rerun()

                        st.divider()
            else:
                st.info("üìä –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def show_news_history():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    st.subheader("üì∞ –ò—Å—Ç–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)

    with col1:
        limit = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:", [10, 25, 50, 100], index=3, key="news_limit")

    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="news_refresh"):
            st.rerun()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        news_list = postgres_manager.get_news(limit)

        if news_list:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π
            st.subheader("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")

            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            col1, col2 = st.columns(2)

            with col1:
                show_source_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É:",
                    ["–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"]
                    + list(set([news.get("source", "unknown") for news in news_list])),
                    key="news_source_filter",
                )

            with col2:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", key="clear_news_filters"):
                    st.rerun()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
            if show_source_filter != "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏":
                news_list = [news for news in news_list if news.get("source") == show_source_filter]

            if news_list:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
                st.subheader("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                (
                    header_col1,
                    header_col2,
                    header_col3,
                    header_col4,
                    header_col5,
                    header_col6,
                    header_col7,
                ) = st.columns([2, 3, 1, 1, 1, 1, 1])

                with header_col1:
                    st.write("**üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**")
                with header_col2:
                    st.write("**üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫**")
                with header_col3:
                    st.write("**üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫**")
                with header_col4:
                    st.write("**üîç –ó–∞–ø—Ä–æ—Å**")
                with header_col5:
                    st.write("**üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ**")
                with header_col6:
                    st.write("**üîó –ü–µ—Ä–µ–π—Ç–∏**")
                with header_col7:
                    st.write("**üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä**")

                st.divider()

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                for idx, news in enumerate(news_list):
                    with st.container():
                        col1, col2, col3, col4, col5, col6, col7 = st.columns([2, 3, 1, 1, 1, 1, 1])

                        with col1:
                            created_at = news.get("created_at", "N/A")
                            if created_at != "N/A":
                                try:
                                    created_at = pd.to_datetime(created_at).strftime(
                                        "%Y-%m-%d %H:%M"
                                    )
                                except Exception:
                                    pass
                            st.write(f"**{created_at}**")

                        with col2:
                            title = news.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                            st.write(f"**{title[:50]}{'...' if len(title) > 50 else ''}**")

                        with col3:
                            source = news.get("source", "N/A")
                            st.write(f"**{source}**")

                        with col4:
                            search_query = news.get("search_query", "N/A")
                            st.write(
                                f"**{search_query[:20]}{'...' if len(search_query) > 20 else ''}**"
                            )

                        with col5:
                            content = news.get("content", "")
                            if content:
                                st.write(f"{content[:30]}{'...' if len(content) > 30 else ''}")
                            else:
                                st.write("‚Äî")

                        with col6:
                            # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏" - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                            url = news.get("url")
                            if url:
                                st.link_button("üîó –ü–µ—Ä–µ–π—Ç–∏", url, help="–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                            else:
                                st.write("‚Äî")

                        with col7:
                            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä" - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                            if st.button(
                                "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_news_{idx}", help="–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–∏"
                            ):
                                st.session_state[f"show_news_{idx}"] = True

                        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏
                        if st.session_state.get(f"show_news_{idx}", False):
                            with st.expander(f"üìÑ –ù–æ–≤–æ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞ {idx + 1})", expanded=True):
                                try:
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç–∏
                                    st.write(f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {news.get('title', 'N/A')}")
                                    st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {news.get('source', 'N/A')}")
                                    st.write(
                                        f"**–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:** {news.get('search_query', 'N/A')}"
                                    )
                                    st.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {news.get('created_at', 'N/A')}")

                                    if news.get("url"):
                                        st.write(f"**URL:** {news['url']}")

                                    if news.get("content"):
                                        st.text_area(
                                            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:",
                                            value=news["content"],
                                            height=300,
                                            disabled=True,
                                        )
                                    else:
                                        st.warning("üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

                                except Exception as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

                                # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                                if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key=f"close_news_{idx}"):
                                    st.session_state[f"show_news_{idx}"] = False
                                    st.rerun()

                        st.divider()
            else:
                st.info("üì∞ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        else:
            st.info("üì∞ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –ü–æ–¥–∑–∞–∫–ª–∞–¥–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    settings_tab = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", ["üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤", "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"]
    )

    if settings_tab == "üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤":
        show_services_status()
    elif settings_tab == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏":
        show_criteria_management()


def show_services_status():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    st.subheader("üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")

    col1, col2 = st.columns(2)

    with col1:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            queue_info = queue_manager.get_queue_info()
            if "status" not in queue_info:
                st.success("‚úÖ Redis - –ø–æ–¥–∫–ª—é—á–µ–Ω")
                st.info(f"–û—á–µ—Ä–µ–¥—å: {queue_info.get('queue_length', 0)} –∑–∞–¥–∞—á")
            else:
                st.error("‚ùå Redis - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception:
            st.error("‚ùå Redis - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    with col2:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
            criteria = postgres_manager.get_active_criteria()
            st.success("‚úÖ PostgreSQL - –ø–æ–¥–∫–ª—é—á–µ–Ω")
            st.info(f"–ö—Ä–∏—Ç–µ—Ä–∏–µ–≤: {len(criteria)}")
        except Exception:
            st.error("‚ùå PostgreSQL - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é
    st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"):
            result = queue_manager.clear_queue()
            if result["status"] == "cleared":
                st.success(f"‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ({result['cleared_jobs']} –∑–∞–¥–∞—á)")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    with col2:
        if st.button("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—á–µ—Ä–µ–¥–∏"):
            queue_info = queue_manager.get_queue_info()
            if "status" not in queue_info:
                st.info(f"–û—á–µ—Ä–µ–¥—å: {queue_info.get('queue_name', 'N/A')}")
                st.info(f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_info.get('queue_length', 0)}")
                st.info(f"–†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {queue_info.get('workers', 0)}")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {queue_info.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


def show_criteria_management():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
    st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    try:
        criteria = postgres_manager.get_criteria()

        if not criteria:
            st.info("üìù –ö—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π.")
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            st.subheader("üìä –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            criteria_df = pd.DataFrame(criteria)

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_df = criteria_df.copy()
            display_df = display_df.rename(
                columns={
                    "id": "ID",
                    "criterion_text": "–¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è",
                    "criteria_version": "–í–µ—Ä—Å–∏—è",
                    "is_active": "–ê–∫—Ç–∏–≤–µ–Ω",
                    "threshold": "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                    "created_at": "–°–æ–∑–¥–∞–Ω",
                    "updated_at": "–û–±–Ω–æ–≤–ª–µ–Ω",
                }
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                display_df[["ID", "–¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è", "–ê–∫—Ç–∏–≤–µ–Ω", "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–°–æ–∑–¥–∞–Ω"]],
                use_container_width=True,
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            st.subheader("üîß –î–µ–π—Å—Ç–≤–∏—è —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏")

            col1, col2, col3 = st.columns(3)

            with col1:
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
                    st.rerun()

            with col2:
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π"):
                    st.session_state["show_add_criterion"] = True

            with col3:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π"):
                    st.session_state["show_edit_criterion"] = True

        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è
        if st.session_state.get("show_add_criterion", False):
            st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π")

            with st.form("add_criterion_form"):
                criterion_id = st.text_input(
                    "ID –∫—Ä–∏—Ç–µ—Ä–∏—è:",
                    placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: molecules_pretrial_v2",
                    help="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–∏—Ç–µ—Ä–∏—è",
                )

                criterion_text = st.text_area(
                    "–¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è:",
                    height=150,
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ...",
                    help="–û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞",
                )

                col1, col2 = st.columns(2)

                with col1:
                    is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)

                with col2:
                    threshold = st.number_input(
                        "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.5,
                        step=0.1,
                        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è",
                    )

                col1, col2 = st.columns(2)

                with col1:
                    submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")

                with col2:
                    if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                        st.session_state["show_add_criterion"] = False
                        st.rerun()

                if submitted:
                    if criterion_id and criterion_text:
                        try:
                            pass

                            from models import Criterion

                            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è
                            new_criterion = Criterion(
                                id=criterion_id,
                                criterion_text=criterion_text,
                                is_active=is_active,
                                threshold=threshold,
                            )

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            result = postgres_manager.create_criterion(new_criterion)

                            if result:
                                st.success(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π '{criterion_id}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                                st.session_state["show_add_criterion"] = False
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è")

                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    else:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è
        if st.session_state.get("show_edit_criterion", False):
            st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π")

            # –í—ã–±–æ—Ä –∫—Ä–∏—Ç–µ—Ä–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if criteria:
                criterion_options = {
                    f"{c['id']} - {c['criterion_text'][:50]}...": c["id"] for c in criteria
                }

                selected_criterion = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", options=list(criterion_options.keys())
                )

                if selected_criterion:
                    criterion_id = criterion_options[selected_criterion]
                    criterion_data = postgres_manager.get_criterion_by_id(criterion_id)

                    if criterion_data:
                        with st.form("edit_criterion_form"):
                            st.write(f"**ID:** {criterion_data['id']}")

                            new_criterion_text = st.text_area(
                                "–¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è:",
                                value=criterion_data["criterion_text"],
                                height=150,
                            )

                            col1, col2 = st.columns(2)

                            with col1:
                                new_is_active = st.checkbox(
                                    "–ê–∫—Ç–∏–≤–µ–Ω", value=criterion_data["is_active"]
                                )

                            with col2:
                                new_threshold = st.number_input(
                                    "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:",
                                    min_value=0.0,
                                    max_value=1.0,
                                    value=criterion_data["threshold"] or 0.5,
                                    step=0.1,
                                )

                            col1, col2, col3 = st.columns(3)

                            with col1:
                                update_submitted = st.form_submit_button("üíæ –û–±–Ω–æ–≤–∏—Ç—å")

                            with col2:
                                delete_submitted = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")

                            with col3:
                                if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                                    st.session_state["show_edit_criterion"] = False
                                    st.rerun()

                            if update_submitted:
                                try:
                                    result = postgres_manager.update_criterion(
                                        criterion_id=criterion_id,
                                        criterion_text=new_criterion_text,
                                        is_active=new_is_active,
                                        threshold=new_threshold,
                                    )

                                    if result:
                                        st.success(
                                            f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π '{criterion_id}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
                                        )
                                        st.session_state["show_edit_criterion"] = False
                                        st.rerun()
                                    else:
                                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è")

                                except Exception as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                            if delete_submitted:
                                try:
                                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                                    if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", key="confirm_delete"):
                                        result = postgres_manager.delete_criterion(criterion_id)

                                        if result:
                                            st.success(
                                                f"‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π '{criterion_id}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                                            )
                                            st.session_state["show_edit_criterion"] = False
                                            st.rerun()
                                        else:
                                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è")
                                    else:
                                        st.warning("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –≥–∞–ª–æ—á–∫—É")

                                except Exception as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.info("üìù –ù–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                if st.button("‚ùå –û—Ç–º–µ–Ω–∞"):
                    st.session_state["show_edit_criterion"] = False
                    st.rerun()

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
        st.exception(e)


if __name__ == "__main__":
    main()
