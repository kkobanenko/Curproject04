"""
–û—Å–Ω–æ–≤–Ω–æ–µ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import json

from config import settings
from database import postgres_manager, clickhouse_manager
from redis_queue import queue_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=settings.page_title,
    page_icon=settings.page_icon,
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .status-success {
        color: #28a745;
        font-weight: bold;
    }
    .status-error {
        color: #dc3545;
        font-weight: bold;
    }
    .status-pending {
        color: #ffc107;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üíä –ê–Ω–∞–ª–∏–∑ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤</h1>', 
                unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üìä –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            ["üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîç –ò—Å—Ç–æ—Ä–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
    if page == "üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞":
        show_text_analysis_page()
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()
    elif page == "üîç –ò—Å—Ç–æ—Ä–∏—è":
        show_history_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()


def show_text_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    st.header("üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    
    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
    with st.form("text_analysis_form"):
        st.subheader("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        text = st.text_area(
            "–¢–µ–∫—Å—Ç:",
            height=200,
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º..."
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            source_url = st.text_input(
                "URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                placeholder="https://example.com/article"
            )
        
        with col2:
            source_date = st.date_input(
                "–î–∞—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                value=None
            )
        
        force_recheck = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        submitted = st.form_submit_button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if submitted and text.strip():
        with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å..."):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            result = queue_manager.enqueue_text_analysis(
                text=text.strip(),
                source_url=source_url if source_url else None,
                source_date=source_date.isoformat() if source_date else None,
                force_recheck=force_recheck
            )
            
            if result['status'] == 'enqueued':
                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: {result['job_id']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ session state
                st.session_state['current_job_id'] = result['job_id']
                st.session_state['job_submitted'] = True
                
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    if 'current_job_id' in st.session_state and st.session_state.get('job_submitted'):
        st.subheader("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        job_status = queue_manager.get_job_status(st.session_state['current_job_id'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        progress_data = queue_manager.get_job_progress(st.session_state['current_job_id'])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = job_status.get('status', 'unknown')
        
        if status == 'finished':
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            show_job_results(job_status.get('result', {}))
            st.session_state['job_submitted'] = False
            
        elif status == 'failed':
            st.error("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            st.error(f"–û—à–∏–±–∫–∞: {job_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            st.session_state['job_submitted'] = False
            
        elif status == 'started':
            st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            show_job_progress(progress_data)
            
        elif status == 'queued':
            st.warning("‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏...")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if progress_data.get('status') != 'not_found':
                show_job_progress(progress_data)
            
        else:
            st.info(f"üìã –°—Ç–∞—Ç—É—Å: {status}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if progress_data.get('status') != 'not_found':
                show_job_progress(progress_data)


def show_job_progress(progress_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    if not progress_data or progress_data.get('status') == 'not_found':
        st.info("üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    st.subheader("üîÑ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", progress_data.get('progress', 'N/A'))
    
    with col2:
        st.metric("–¢–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π", progress_data.get('current_criterion', 'N/A'))
    
    with col3:
        st.metric("–°—Ç–∞—Ç—É—Å", progress_data.get('status', 'N/A'))
    
    # –¢–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π
    if 'criterion_text' in progress_data:
        st.subheader("üìù –¢–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π")
        st.info(f"**{progress_data.get('current_criterion', 'N/A')}**: {progress_data['criterion_text']}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if 'current_result' in progress_data:
        result = progress_data['current_result']
        st.subheader("ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Ollama")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            match_status = "‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ" if result.get('is_match') else "‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            st.metric("–†–µ–∑—É–ª—å—Ç–∞—Ç", match_status)
        
        with col2:
            st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result.get('confidence', 0):.2f}")
        
        with col3:
            st.metric("–í—Ä–µ–º—è (–º—Å)", result.get('latency_ms', 0))
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if 'summary' in result and result['summary']:
            st.subheader("üìÑ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            st.info(result['summary'])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        if 'model_name' in result:
            st.caption(f"–ú–æ–¥–µ–ª—å: {result['model_name']}")


def show_job_results(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    if not result:
        st.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å", result.get('status', 'N/A'))
    
    with col2:
        st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", result.get('total_events', 0))
    
    with col3:
        st.metric("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è", result.get('matches', 0))
    
    with col4:
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result.get('avg_confidence', 0):.2f}")
    
    # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π
    if 'events' in result and result['events']:
        st.subheader("üìù –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π")
        
        events_df = pd.DataFrame(result['events'])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π
        st.dataframe(
            events_df[['criterion_id', 'is_match', 'confidence', 'summary', 'latency_ms']],
            use_container_width=True
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if len(events_df) > 1:
            fig = px.bar(
                events_df,
                x='criterion_id',
                y='confidence',
                color='is_match',
                title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'}
            )
            st.plotly_chart(fig, use_container_width=True)


def show_statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        days = st.selectbox("–ü–µ—Ä–∏–æ–¥:", [7, 30, 90], index=1)
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            st.rerun()
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        criteria_stats = clickhouse_manager.get_criteria_stats(days)
        
        if criteria_stats:
            stats_df = pd.DataFrame(criteria_stats)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_events = stats_df['total_events'].sum()
                st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", total_events)
            
            with col2:
                total_matches = stats_df['matches'].sum()
                match_rate = (total_matches / total_events * 100) if total_events > 0 else 0
                st.metric("–í—Å–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", f"{total_matches} ({match_rate:.1f}%)")
            
            with col3:
                avg_confidence = stats_df['avg_confidence'].mean()
                st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
            
            with col4:
                avg_latency = stats_df['avg_latency_ms'].mean()
                st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)", f"{avg_latency:.0f}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            st.subheader("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            display_df = stats_df.copy()
            display_df['match_rate'] = (display_df['matches'] / display_df['total_events'] * 100).round(1)
            display_df = display_df.rename(columns={
                'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π',
                'total_events': '–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π',
                'matches': '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è',
                'match_rate': '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (%)',
                'avg_confidence': '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
                'avg_latency_ms': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)'
            })
            
            st.dataframe(
                display_df[['–ö—Ä–∏—Ç–µ—Ä–∏–π', '–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π', '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è', '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (%)', 
                           '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)']],
                use_container_width=True
            )
            
            # –ì—Ä–∞—Ñ–∏–∫–∏
            st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫–∏")
            col1, col2 = st.columns(2)
            
            with col1:
                # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                fig1 = px.bar(
                    stats_df,
                    x='criterion_id',
                    y='total_events',
                    title="–°–æ–±—ã—Ç–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                    labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'total_events': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π'},
                    color='total_events',
                    color_continuous_scale='Blues'
                )
                fig1.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig1, use_container_width=True)
            
            with col2:
                # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                fig2 = px.bar(
                    stats_df,
                    x='criterion_id',
                    y='matches',
                    title="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                    labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'matches': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'},
                    color='matches',
                    color_continuous_scale='Greens'
                )
                fig2.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig2, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            fig3 = px.bar(
                stats_df,
                x='criterion_id',
                y=stats_df['matches'] / stats_df['total_events'] * 100,
                title="–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'y': '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (%)'},
                color=stats_df['matches'] / stats_df['total_events'] * 100,
                color_continuous_scale='Viridis'
            )
            fig3.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig3, use_container_width=True)
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            daily_stats = clickhouse_manager.get_daily_stats(days)
            
            if daily_stats:
                daily_df = pd.DataFrame(daily_stats)
                daily_df['date'] = pd.to_datetime(daily_df['date'])
                
                st.subheader("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–Ω—è–º
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    avg_daily_events = daily_df['total_events'].mean()
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å", f"{avg_daily_events:.1f}")
                
                with col2:
                    avg_daily_matches = daily_df['matches'].mean()
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –¥–µ–Ω—å", f"{avg_daily_matches:.1f}")
                
                with col3:
                    avg_daily_confidence = daily_df['avg_confidence'].mean()
                    st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_daily_confidence:.2f}")
                
                # –ì—Ä–∞—Ñ–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                fig4 = px.line(
                    daily_df,
                    x='date',
                    y=['total_events', 'matches'],
                    title="–°–æ–±—ã—Ç–∏—è –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–Ω—è–º",
                    labels={'date': '–î–∞—Ç–∞', 'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'variable': '–¢–∏–ø'},
                    markers=True
                )
                fig4.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig4, use_container_width=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
                fig5 = px.line(
                    daily_df,
                    x='date',
                    y='avg_confidence',
                    title="–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º",
                    labels={'date': '–î–∞—Ç–∞', 'avg_confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'},
                    markers=True
                )
                fig5.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig5, use_container_width=True)
        
        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        st.exception(e)


def show_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    st.header("üîç –ò—Å—Ç–æ—Ä–∏—è")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    
    with col1:
        limit = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:", [10, 25, 50, 100], index=3)
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
            st.rerun()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        events = clickhouse_manager.get_recent_events(limit)
        
        if events:
            events_df = pd.DataFrame(events)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            if 'ingest_ts' in events_df.columns:
                events_df['ingest_ts'] = pd.to_datetime(events_df['ingest_ts'])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
            
            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            show_matches_only = st.checkbox("–¢–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
            
            if show_matches_only:
                events_df = events_df[events_df['is_match'] == 1]
            
            if not events_df.empty:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_df = events_df.copy()
                display_df = display_df.rename(columns={
                    'ingest_ts': '–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞',
                    'criterion_text': '–ö—Ä–∏—Ç–µ—Ä–∏–π',
                    'is_match': '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
                    'confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
                    'summary': '–†–µ–∑—É–ª—å—Ç–∞—Ç'
                })
                
                st.dataframe(
                    display_df[['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', '–ö—Ä–∏—Ç–µ—Ä–∏–π', '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–†–µ–∑—É–ª—å—Ç–∞—Ç']],
                    use_container_width=True
                )
            else:
                st.info("üìä –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        else:
            st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    st.subheader("üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            queue_info = queue_manager.get_queue_info()
            if 'status' not in queue_info:
                st.success("‚úÖ Redis - –ø–æ–¥–∫–ª—é—á–µ–Ω")
                st.info(f"–û—á–µ—Ä–µ–¥—å: {queue_info.get('queue_length', 0)} –∑–∞–¥–∞—á")
            else:
                st.error("‚ùå Redis - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            st.error("‚ùå Redis - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with col2:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
            criteria = postgres_manager.get_active_criteria()
            st.success("‚úÖ PostgreSQL - –ø–æ–¥–∫–ª—é—á–µ–Ω")
            st.info(f"–ö—Ä–∏—Ç–µ—Ä–∏–µ–≤: {len(criteria)}")
        except:
            st.error("‚ùå PostgreSQL - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é
    st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"):
            result = queue_manager.clear_queue()
            if result['status'] == 'cleared':
                st.success(f"‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ({result['cleared_jobs']} –∑–∞–¥–∞—á)")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    with col2:
        if st.button("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—á–µ—Ä–µ–¥–∏"):
            queue_info = queue_manager.get_queue_info()
            if 'status' not in queue_info:
                st.info(f"–û—á–µ—Ä–µ–¥—å: {queue_info.get('queue_name', 'N/A')}")
                st.info(f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_info.get('queue_length', 0)}")
                st.info(f"–†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {queue_info.get('workers', 0)}")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {queue_info.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


if __name__ == "__main__":
    main()
