"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Redis, PostgreSQL, ClickHouse
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import json
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤",
    page_icon="üíä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .status-success {
        color: #28a745;
        font-weight: bold;
    }
    .status-error {
        color: #dc3545;
        font-weight: bold;
    }
    .status-pending {
        color: #ffc107;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)


def generate_mock_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    criteria = ['molecules_pretrial_v1', 'drug_safety_v1', 'clinical_trials_v1']
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    events = []
    for i in range(50):
        events.append({
            'event_id': f'event_{i}',
            'source_hash': f'hash_{i}',
            'source_url': f'https://example.com/article_{i}',
            'source_date': datetime.now() - timedelta(days=random.randint(0, 30)),
            'ingest_ts': datetime.now() - timedelta(hours=random.randint(0, 720)),
            'criterion_id': random.choice(criteria),
            'criterion_text': '–¢–µ—Å—Ç–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π',
            'is_match': random.choice([True, False]),
            'confidence': round(random.uniform(0.1, 0.95), 2),
            'summary': f'–†–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {i}',
            'model_name': 'llama3:8b',
            'latency_ms': random.randint(800, 3000),
            'created_at': datetime.now()
        })
    
    return events


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üíä –ê–Ω–∞–ª–∏–∑ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤</h1>', 
                unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üìä –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            ["üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîç –ò—Å—Ç–æ—Ä–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
    if page == "üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞":
        show_text_analysis_page()
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics_page()
    elif page == "üîç –ò—Å—Ç–æ—Ä–∏—è":
        show_history_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_page()


def show_text_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    st.header("üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    
    # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
    with st.form("text_analysis_form"):
        st.subheader("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        text = st.text_area(
            "–¢–µ–∫—Å—Ç:",
            height=200,
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º..."
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            source_url = st.text_input(
                "URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                placeholder="https://example.com/article"
            )
        
        with col2:
            source_date = st.date_input(
                "–î–∞—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                value=None
            )
        
        force_recheck = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        submitted = st.form_submit_button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if submitted and text.strip():
        with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å..."):
            time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            job_id = f"job_{int(time.time())}"
            st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: {job_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ session state
            st.session_state['current_job_id'] = job_id
            st.session_state['job_submitted'] = True
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    if 'current_job_id' in st.session_state and st.session_state.get('job_submitted'):
        st.subheader("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status = random.choice(['queued', 'started', 'finished'])
        
        if status == 'finished':
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            show_mock_job_results()
            st.session_state['job_submitted'] = False
            
        elif status == 'started':
            st.info("üîÑ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            
        elif status == 'queued':
            st.warning("‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏...")


def show_mock_job_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∫)"""
    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
    events = generate_mock_data()[:5]  # –¢–æ–ª—å–∫–æ 5 —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–µ–º–æ
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å", "success")
    
    with col2:
        st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", len(events))
    
    with col3:
        matches = sum(1 for e in events if e['is_match'])
        st.metric("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è", matches)
    
    with col4:
        avg_confidence = sum(e['confidence'] for e in events) / len(events)
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
    
    # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π
    st.subheader("üìù –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π")
    
    events_df = pd.DataFrame(events)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π
    st.dataframe(
        events_df[['criterion_id', 'is_match', 'confidence', 'summary', 'latency_ms']],
        use_container_width=True
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if len(events_df) > 1:
        fig = px.bar(
            events_df,
            x='criterion_id',
            y='confidence',
            color='is_match',
            title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
            labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'}
        )
        st.plotly_chart(fig, use_container_width=True)


def show_statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        days = st.selectbox("–ü–µ—Ä–∏–æ–¥:", [7, 30, 90], index=1)
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    events = generate_mock_data()
    stats_df = pd.DataFrame(events)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_events = len(stats_df)
        st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", total_events)
    
    with col2:
        total_matches = stats_df['is_match'].sum()
        st.metric("–í—Å–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", total_matches)
    
    with col3:
        avg_confidence = stats_df['confidence'].mean()
        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
    
    with col4:
        avg_latency = stats_df['latency_ms'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)", f"{avg_latency:.0f}")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        criteria_stats = stats_df.groupby('criterion_id').size().reset_index(name='total_events')
        fig1 = px.bar(
            criteria_stats,
            x='criterion_id',
            y='total_events',
            title="–°–æ–±—ã—Ç–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
            labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'total_events': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π'}
        )
        st.plotly_chart(fig1, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        matches_stats = stats_df.groupby('criterion_id')['is_match'].sum().reset_index()
        fig2 = px.bar(
            matches_stats,
            x='criterion_id',
            y='is_match',
            title="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
            labels={'criterion_id': '–ö—Ä–∏—Ç–µ—Ä–∏–π', 'is_match': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π'}
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    daily_data = []
    for i in range(7):
        date = datetime.now() - timedelta(days=i)
        daily_data.append({
            'date': date.date(),
            'total_events': random.randint(5, 20),
            'matches': random.randint(1, 8),
            'avg_confidence': round(random.uniform(0.4, 0.8), 2),
            'avg_latency_ms': random.randint(1000, 2000)
        })
    
    daily_df = pd.DataFrame(daily_data)
    daily_df['date'] = pd.to_datetime(daily_df['date'])
    
    fig3 = px.line(
        daily_df,
        x='date',
        y=['total_events', 'matches'],
        title="–°–æ–±—ã—Ç–∏—è –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–Ω—è–º",
        labels={'date': '–î–∞—Ç–∞', 'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'variable': '–¢–∏–ø'}
    )
    st.plotly_chart(fig3, use_container_width=True)


def show_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    st.header("üîç –ò—Å—Ç–æ—Ä–∏—è")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    
    with col1:
        limit = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:", [10, 25, 50, 100], index=2)
    
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
            st.rerun()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫ —Å–æ–±—ã—Ç–∏—è
    events = generate_mock_data()[:limit]
    
    if events:
        events_df = pd.DataFrame(events)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        events_df['ingest_ts'] = pd.to_datetime(events_df['ingest_ts'])
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        show_matches_only = st.checkbox("–¢–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        
        if show_matches_only:
            events_df = events_df[events_df['is_match'] == True]
        
        if not events_df.empty:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_df = events_df.copy()
            display_df = display_df.rename(columns={
                'ingest_ts': '–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞',
                'criterion_text': '–ö—Ä–∏—Ç–µ—Ä–∏–π',
                'is_match': '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
                'confidence': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
                'summary': '–†–µ–∑—É–ª—å—Ç–∞—Ç'
            })
            
            st.dataframe(
                display_df[['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞', '–ö—Ä–∏—Ç–µ—Ä–∏–π', '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–†–µ–∑—É–ª—å—Ç–∞—Ç']],
                use_container_width=True
            )
        else:
            st.info("üìä –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    else:
        st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")


def show_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    st.subheader("üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å Redis
        st.success("‚úÖ Redis - –ø–æ–¥–∫–ª—é—á–µ–Ω")
        st.info("–û—á–µ—Ä–µ–¥—å: 0 –∑–∞–¥–∞—á")
    
    with col2:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å PostgreSQL
        st.success("‚úÖ PostgreSQL - –ø–æ–¥–∫–ª—é—á–µ–Ω")
        st.info("–ö—Ä–∏—Ç–µ—Ä–∏–µ–≤: 3")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é
    st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"):
            st.success("‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ (0 –∑–∞–¥–∞—á)")
    
    with col2:
        if st.button("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—á–µ—Ä–µ–¥–∏"):
            st.info("–û—á–µ—Ä–µ–¥—å: text_analysis")
            st.info("–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: 0")
            st.info("–†–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: 0")


if __name__ == "__main__":
    main()
