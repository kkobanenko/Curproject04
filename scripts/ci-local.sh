#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ CI/CD pipeline
# –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã CI/CD –ª–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥ push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${BLUE}[CI-LOCAL]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã
check_command() {
    if ! command -v $1 &> /dev/null; then
        print_error "–ö–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    # –ü–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    TEST_PORTS=(8506 8001 6384 5437 8128 9005 11439)
    
    for port in "${TEST_PORTS[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            print_warning "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
            lsof -Pi :$port -sTCP:LISTEN
        else
            print_success "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
cleanup_test_data() {
    print_message "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose -f .github/workflows/docker-compose.test.yml down -v 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    docker images | grep pharma-analysis | grep test | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
    
    print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è CI/CD..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Python
    check_command python3
    check_command pip3
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    pip3 install --upgrade pip
    pip3 install flake8 black isort mypy bandit safety pytest pytest-cov pytest-mock
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
stage_code_quality() {
    print_message "üîç –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (Black)..."
    black --check --diff ui/ worker/ llm/ db/ tests/ || {
        print_error "–ö–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        print_message "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: black ui/ worker/ llm/ db/ tests/"
        return 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)..."
    isort --check-only --diff ui/ worker/ llm/ db/ tests/ || {
        print_error "–ò–º–ø–æ—Ä—Ç—ã –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
        print_message "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: isort ui/ worker/ llm/ db/ tests/"
        return 1
    }
    
    # –õ–∏–Ω—Ç–∏–Ω–≥
    print_message "–õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞ (Flake8)..."
    flake8 ui/ worker/ llm/ db/ tests/ --max-line-length=100 --ignore=E203,W503 || {
        print_error "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞"
        return 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (mypy)..."
    mypy ui/ worker/ llm/ db/ --ignore-missing-imports || {
        print_warning "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Bandit)..."
    bandit -r ui/ worker/ llm/ db/ -ll || {
        print_warning "–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö (Safety)..."
    safety check || {
        print_warning "–ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º)"
    }
    
    print_success "–≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –≠—Ç–∞–ø 2: Unit —Ç–µ—Å—Ç—ã
stage_unit_tests() {
    print_message "üß™ –≠—Ç–∞–ø 2: Unit —Ç–µ—Å—Ç—ã"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    pip3 install -r ui/requirements.txt
    pip3 install -r worker/requirements.txt
    pip3 install requests pytest-httpx
    pip3 install psycopg2-binary clickhouse-driver
    
    # Unit —Ç–µ—Å—Ç—ã –¥–ª—è UI
    print_message "Unit —Ç–µ—Å—Ç—ã –¥–ª—è UI..."
    python3 -m pytest ui/test_app.py ui/test_clickhouse.py -v --tb=short || {
        print_error "Unit —Ç–µ—Å—Ç—ã UI –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    }
    
    # Unit —Ç–µ—Å—Ç—ã –¥–ª—è Worker
    print_message "Unit —Ç–µ—Å—Ç—ã –¥–ª—è Worker..."
    python3 -m pytest worker/test_tasks.py -v --tb=short || {
        print_error "Unit —Ç–µ—Å—Ç—ã Worker –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    }
    
    # Unit —Ç–µ—Å—Ç—ã –¥–ª—è LLM
    print_message "Unit —Ç–µ—Å—Ç—ã –¥–ª—è LLM..."
    python3 -m pytest llm/test_api.py -v --tb=short || {
        print_error "Unit —Ç–µ—Å—Ç—ã LLM –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    }
    
    # Unit —Ç–µ—Å—Ç—ã –¥–ª—è DB
    print_message "Unit —Ç–µ—Å—Ç—ã –¥–ª—è DB..."
    python3 -m pytest db/test_models.py -v --tb=short || {
        print_error "Unit —Ç–µ—Å—Ç—ã DB –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    }
    
    print_success "–≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –≠—Ç–∞–ø 3: Integration —Ç–µ—Å—Ç—ã
stage_integration_tests() {
    print_message "üîó –≠—Ç–∞–ø 3: Integration —Ç–µ—Å—Ç—ã"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print_message "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f .github/workflows/docker-compose.test.yml --profile test up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_message "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Redis
    docker-compose -f .github/workflows/docker-compose.test.yml exec -T redis-test redis-cli ping || {
        print_error "Redis –Ω–µ –≥–æ—Ç–æ–≤"
        return 1
    }
    
    # PostgreSQL
    docker-compose -f .github/workflows/docker-compose.test.yml exec -T pg-test pg_isready -U postgres -d pharma_analysis_test || {
        print_error "PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤"
        return 1
    }
    
    # ClickHouse
    docker-compose -f .github/workflows/docker-compose.test.yml exec -T ch-test wget --no-verbose --tries=1 --spider http://127.0.0.1:8123/ping || {
        print_error "ClickHouse –Ω–µ –≥–æ—Ç–æ–≤"
        return 1
    }
    
    # Ollama
    docker-compose -f .github/workflows/docker-compose.test.yml exec -T llm-test curl -f http://127.0.0.1:11434/api/tags || {
        print_error "Ollama –Ω–µ –≥–æ—Ç–æ–≤"
        return 1
    }
    
    # –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤
    print_message "–ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤..."
    python3 -m pytest tests/test_integration.py -v --tb=short || {
        print_error "Integration —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    }
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    print_message "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤..."
    python3 run_tests.py || {
        print_error "–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω"
        return 1
    }
    
    print_success "–≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –≠—Ç–∞–ø 4: Security —Ç–µ—Å—Ç—ã
stage_security_tests() {
    print_message "üîí –≠—Ç–∞–ø 4: Security —Ç–µ—Å—Ç—ã"
    
    # –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤
    print_message "–ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤..."
    python3 -m pytest tests/test_security.py -v --tb=short || {
        print_error "Security —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    }
    
    print_success "–≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –≠—Ç–∞–ø 5: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
stage_build_images() {
    print_message "üê≥ –≠—Ç–∞–ø 5: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
    
    # –°–±–æ—Ä–∫–∞ UI –æ–±—Ä–∞–∑–∞
    print_message "–°–±–æ—Ä–∫–∞ UI –æ–±—Ä–∞–∑–∞..."
    docker build -t pharma-analysis-ui:test ./ui || {
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ UI –æ–±—Ä–∞–∑–∞"
        return 1
    }
    
    # –°–±–æ—Ä–∫–∞ Worker –æ–±—Ä–∞–∑–∞
    print_message "–°–±–æ—Ä–∫–∞ Worker –æ–±—Ä–∞–∑–∞..."
    docker build -t pharma-analysis-worker:test ./worker || {
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Worker –æ–±—Ä–∞–∑–∞"
        return 1
    }
    
    # –°–±–æ—Ä–∫–∞ LLM –æ–±—Ä–∞–∑–∞
    print_message "–°–±–æ—Ä–∫–∞ LLM –æ–±—Ä–∞–∑–∞..."
    docker build -t pharma-analysis-llm:test ./llm || {
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ LLM –æ–±—Ä–∞–∑–∞"
        return 1
    }
    
    print_success "–≠—Ç–∞–ø 5 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  --stage STAGE       –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç—Ç–∞–ø"
    echo "  --cleanup           –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"
    echo "  --no-cleanup        –ù–µ –æ—á–∏—â–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
    echo "  --quick             –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã:"
    echo "  code-quality        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
    echo "  unit-tests          Unit —Ç–µ—Å—Ç—ã"
    echo "  integration-tests   Integration —Ç–µ—Å—Ç—ã"
    echo "  security-tests      Security —Ç–µ—Å—Ç—ã"
    echo "  build-images        –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
    echo "  all                 –í—Å–µ —ç—Ç–∞–ø—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã"
    echo "  $0 --stage code-quality              # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
    echo "  $0 --cleanup --stage integration-tests # –û—á–∏—Å—Ç–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å integration —Ç–µ—Å—Ç—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    STAGE="all"
    CLEANUP_BEFORE=false
    CLEANUP_AFTER=true
    QUICK_MODE=false
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --stage)
                STAGE="$2"
                shift 2
                ;;
            --cleanup)
                CLEANUP_BEFORE=true
                shift
                ;;
            --no-cleanup)
                CLEANUP_AFTER=false
                shift
                ;;
            --quick)
                QUICK_MODE=true
                shift
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    echo "=========================================="
    echo "üöÄ –õ–û–ö–ê–õ–¨–ù–´–ô CI/CD PIPELINE"
    echo "=========================================="
    echo "–≠—Ç–∞–ø: $STAGE"
    echo "–û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: $CLEANUP_BEFORE"
    echo "–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $CLEANUP_AFTER"
    echo "–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: $QUICK_MODE"
    echo "=========================================="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_command docker
    check_command docker-compose
    check_command python3
    check_command pip3
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if [ "$CLEANUP_BEFORE" = true ]; then
        cleanup_test_data
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    check_ports
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies
    
    # –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–æ–≤
    case $STAGE in
        "code-quality")
            stage_code_quality
            ;;
        "unit-tests")
            stage_unit_tests
            ;;
        "integration-tests")
            stage_integration_tests
            ;;
        "security-tests")
            stage_security_tests
            ;;
        "build-images")
            stage_build_images
            ;;
        "all")
            stage_code_quality
            stage_unit_tests
            stage_integration_tests
            stage_security_tests
            stage_build_images
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: $STAGE"
            show_help
            exit 1
            ;;
    esac
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if [ "$CLEANUP_AFTER" = true ]; then
        cleanup_test_data
    fi
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    echo "=========================================="
    print_success "üéâ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!"
    echo "=========================================="
    echo "–í–∞—à –∫–æ–¥ –≥–æ—Ç–æ–≤ –∫ push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: git add . && git commit -m 'feat: your changes' && git push"
    echo "=========================================="
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
