# CI/CD Pipeline –¥–ª—è MVP –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

name: CI/CD Pipeline

# –¢—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞ pipeline
on:
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ push –≤ –ª—é–±—É—é –≤–µ—Ç–∫—É
  push:
    branches: [ main, develop, cicd ]
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Pull Request
  pull_request:
    branches: [ main, develop ]
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞ (–¥–ª—è —Ä–µ–ª–∏–∑–æ–≤)
  release:
    types: [ published ]
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ pipeline
env:
  # –í–µ—Ä—Å–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  
  # –ù–∞–∑–≤–∞–Ω–∏—è Docker –æ–±—Ä–∞–∑–æ–≤
  UI_IMAGE: pharma-analysis-ui
  WORKER_IMAGE: pharma-analysis-worker
  LLM_IMAGE: pharma-analysis-llm
  
  # –¢–µ–≥–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤
  IMAGE_TAG: ${{ github.sha }}
  LATEST_TAG: latest
  
  # –†–µ–≥–∏—Å—Ç—Ä Docker (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π)
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –ª–∏–Ω—Ç–∏–Ω–≥
  code-quality:
    name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      
      - name: üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ª–∏–Ω—Ç–∏–Ω–≥–∞
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
      
      - name: üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (Black)
        run: |
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Black..."
          black --check --diff ui/ worker/ llm/ db/ tests/
      
      - name: üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)
        run: |
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é isort..."
          isort --check-only --diff ui/ worker/ llm/ db/ tests/
      
      - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞ (Flake8)
        run: |
          echo "–õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Flake8..."
          flake8 ui/ worker/ llm/ db/ tests/ --max-line-length=100 --ignore=E203,W503
      
      - name: üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Bandit)
        run: |
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Bandit..."
          bandit -r ui/ worker/ llm/ db/ -f json -o bandit-report.json || true
          bandit -r ui/ worker/ llm/ db/ -ll
      
      - name: üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö (Safety)
        run: |
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö..."
          safety check --json --output safety-report.json || true
          safety check
      
      - name: üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # –≠—Ç–∞–ø 2: Unit —Ç–µ—Å—Ç—ã
  unit-tests:
    name: üß™ Unit —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        component: [ui, worker, llm, db]
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
      
      - name: üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          if [ "${{ matrix.component }}" = "ui" ]; then
            pip install -r ui/requirements.txt
          elif [ "${{ matrix.component }}" = "worker" ]; then
            pip install -r worker/requirements.txt
          elif [ "${{ matrix.component }}" = "llm" ]; then
            pip install requests pytest-httpx
          elif [ "${{ matrix.component }}" = "db" ]; then
            pip install psycopg2-binary clickhouse-driver
          fi
          
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
          pip install pytest-cov
      
      - name: üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
        run: |
          echo "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${{ matrix.component }}"
          
          if [ "${{ matrix.component }}" = "ui" ]; then
            python -m pytest ui/test_app.py ui/test_clickhouse.py -v --cov-report=xml --cov-report=html
          elif [ "${{ matrix.component }}" = "worker" ]; then
            python -m pytest worker/test_tasks.py -v --cov=worker --cov-report=xml --cov-report=html
          elif [ "${{ matrix.component }}" = "llm" ]; then
            python -m pytest llm/test_api.py -v --cov=llm --cov-report=xml --cov-report=html
          elif [ "${{ matrix.component }}" = "db" ]; then
            python -m pytest db/test_models.py -v --cov=db --cov-report=xml --cov-report=html
          fi
      
      - name: üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-${{ matrix.component }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  # –≠—Ç–∞–ø 3: Integration —Ç–µ—Å—Ç—ã
  integration-tests:
    name: üîó Integration —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      # –ó–∞–ø—É—Å–∫ Redis –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # –ó–∞–ø—É—Å–∫ PostgreSQL –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pharma_analysis_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # –ó–∞–ø—É—Å–∫ ClickHouse –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      clickhouse:
        image: clickhouse/clickhouse-server:23.8-alpine
        ports:
          - 8123:8123
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://127.0.0.1:8123/ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
      
      - name: üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r ui/requirements.txt
          pip install -r worker/requirements.txt
          pip install requests pytest-httpx
          pip install psycopg2-binary clickhouse-driver
      
      - name: üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        run: |
          echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
          
          # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã PostgreSQL
          PGPASSWORD=postgres psql -h localhost -U postgres -d pharma_analysis_test -f db/migrations/001_init_postgres.sql
          PGPASSWORD=postgres psql -h localhost -U postgres -d pharma_analysis_test -f db/migrations/002_add_text_to_sources.sql
          PGPASSWORD=postgres psql -h localhost -U postgres -d pharma_analysis_test -f db/migrations/003_add_news_table.sql
          
          # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã ClickHouse
          curl -X POST 'http://localhost:8123/' --data-binary @db/clickhouse/001_init_clickhouse.sql
      
      - name: üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤
        run: |
          echo "–ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤..."
          python -m pytest tests/test_integration.py -v --tb=short
      
      - name: üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
        run: |
          echo "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤..."
          python run_tests.py
      
      - name: üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test_results.json
            TEST_REPORT.md
          retention-days: 30

  # –≠—Ç–∞–ø 4: Security —Ç–µ—Å—Ç—ã
  security-tests:
    name: üîí Security —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
      
      - name: üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock
          pip install -r ui/requirements.txt
          pip install -r worker/requirements.txt
      
      - name: üîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤
        run: |
          echo "–ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤..."
          python -m pytest tests/test_security.py -v --tb=short
      
      - name: üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ security —Ç–µ—Å—Ç–æ–≤
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: trivy-results.sarif
          retention-days: 30

  # –≠—Ç–∞–ø 5: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
  build-images:
    name: üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests]
    
    strategy:
      matrix:
        # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        component: [ui, worker, llm]
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
      
      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–∞
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
        if: github.event_name == 'release'
        run: |
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ matrix.component }}:${{ env.LATEST_TAG }} ${{ env.DOCKER_REGISTRY }}/${{ matrix.component }}:${{ github.event.release.tag_name }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ matrix.component }}:${{ github.event.release.tag_name }}

  # –≠—Ç–∞–ø 6: –î–µ–ø–ª–æ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  deploy:
    name: üöÄ –î–µ–ø–ª–æ–π
    runs-on: ubuntu-latest
    needs: build-images
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏ –∏–ª–∏ —Ä–µ–ª–∏–∑–æ–≤
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
      
      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        id: deploy
        run: |
          echo "üöÄ –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
          # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ SSH, Kubernetes, Docker Swarm –∏ —Ç.–¥.
          
          # –ü—Ä–∏–º–µ—Ä –¥–ª—è SSH –¥–µ–ø–ª–æ—è:
          # echo "–î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ SSH..."
          # ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
          #   docker pull ${{ env.DOCKER_REGISTRY }}/ui:${{ env.IMAGE_TAG }} &&
          #   docker pull ${{ env.DOCKER_REGISTRY }}/worker:${{ env.IMAGE_TAG }} &&
          #   docker pull ${{ env.DOCKER_REGISTRY }}/llm:${{ env.IMAGE_TAG }} &&
          #   docker-compose down &&
          #   docker-compose up -d
          # "
          
          # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
          echo "–û–±—Ä–∞–∑—ã:"
          echo "  - ${{ env.DOCKER_REGISTRY }}/ui:${{ env.IMAGE_TAG }}"
          echo "  - ${{ env.DOCKER_REGISTRY }}/worker:${{ env.IMAGE_TAG }}"
          echo "  - ${{ env.DOCKER_REGISTRY }}/llm:${{ env.IMAGE_TAG }}"
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –¥–ª—è environment
          echo "url=https://your-app-domain.com" >> $GITHUB_OUTPUT
      
      - name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–ø–ª–æ–µ
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: ${{ steps.deploy.outputs.url }}"
          else
            echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
            exit 1
          fi

  # –≠—Ç–∞–ø 7: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–æ–≤)
  create-release:
    name: üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
    runs-on: ubuntu-latest
    needs: [build-images, deploy]
    if: github.event_name == 'release'
    
    steps:
      - name: üì• Checkout –∫–æ–¥–∞
        uses: actions/checkout@v4
      
      - name: üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞
        run: |
          echo "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞..."
          tar -czf pharma-analysis-${{ github.event.release.tag_name }}.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='htmlcov' \
            --exclude='.coverage' \
            .
      
      - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤ —Ä–µ–ª–∏–∑
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./pharma-analysis-${{ github.event.release.tag_name }}.tar.gz
          asset_name: pharma-analysis-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ pipeline
notifications:
  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack, Discord, Email –∏ —Ç.–¥.
  # –ü—Ä–∏–º–µ—Ä –¥–ª—è Slack:
  # - name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
  #   uses: 8398a7/action-slack@v3
  #   if: always()
  #   with:
  #     status: ${{ job.status }}
  #     channel: '#deployments'
  #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #     fields: repo,message,commit,author,action,eventName,ref,workflow
  pass
