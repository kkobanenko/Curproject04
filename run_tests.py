#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import subprocess
import sys
import time
import json
from pathlib import Path

def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    start_time = time.time()
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        end_time = time.time()
        
        print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"Exit code: {result.returncode}")
        
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        return result.returncode == 0, end_time - start_time
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False, 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results = {
        "unit_tests": {},
        "integration_tests": {},
        "load_tests": {},
        "security_tests": {},
        "overall": {
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "total_time": 0
        }
    }
    
    # 1. Unit —Ç–µ—Å—Ç—ã
    print("\nüìã –≠–¢–ê–ü 1: Unit —Ç–µ—Å—Ç—ã")
    
    unit_test_files = [
        ("llm/test_api.py", "LLM API —Ç–µ—Å—Ç—ã"),
        ("db/test_models.py", "Database Models —Ç–µ—Å—Ç—ã"),
        ("worker/test_tasks.py", "Worker Tasks —Ç–µ—Å—Ç—ã"),
        ("ui/test_app.py", "UI App —Ç–µ—Å—Ç—ã")
    ]
    
    for test_file, description in unit_test_files:
        success, duration = run_command(
            f"python3 -m pytest {test_file} -v --tb=short",
            description
        )
        results["unit_tests"][test_file] = {
            "success": success,
            "duration": duration,
            "description": description
        }
        results["overall"]["total_time"] += duration
    
    # 2. Integration —Ç–µ—Å—Ç—ã
    print("\nüìã –≠–¢–ê–ü 2: Integration —Ç–µ—Å—Ç—ã")
    
    success, duration = run_command(
        "python3 -m pytest tests/test_integration.py -v --tb=short",
        "Integration —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ flow"
    )
    results["integration_tests"]["full_flow"] = {
        "success": success,
        "duration": duration,
        "description": "Integration —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ flow"
    }
    results["overall"]["total_time"] += duration
    
    # 3. Load —Ç–µ—Å—Ç—ã
    print("\nüìã –≠–¢–ê–ü 3: Load —Ç–µ—Å—Ç—ã")
    
    success, duration = run_command(
        "python3 -m pytest tests/test_load.py -v --tb=short",
        "Load —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    results["load_tests"]["performance"] = {
        "success": success,
        "duration": duration,
        "description": "Load —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    }
    results["overall"]["total_time"] += duration
    
    # 4. Security —Ç–µ—Å—Ç—ã
    print("\nüìã –≠–¢–ê–ü 4: Security —Ç–µ—Å—Ç—ã")
    
    success, duration = run_command(
        "python3 -m pytest tests/test_security.py -v --tb=short",
        "Security —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    )
    results["security_tests"]["security"] = {
        "success": success,
        "duration": duration,
        "description": "Security —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    }
    results["overall"]["total_time"] += duration
    
    # 5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    print("\nüìã –≠–¢–ê–ü 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
    
    success, duration = run_command(
        "python3 integration_test.py",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"
    )
    results["integration_tests"]["system"] = {
        "success": success,
        "duration": duration,
        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"
    }
    results["overall"]["total_time"] += duration
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    all_tests = []
    for category in ["unit_tests", "integration_tests", "load_tests", "security_tests"]:
        for test_name, test_result in results[category].items():
            all_tests.append(test_result)
    
    results["overall"]["total_tests"] = len(all_tests)
    results["overall"]["passed_tests"] = sum(1 for test in all_tests if test["success"])
    results["overall"]["failed_tests"] = sum(1 for test in all_tests if not test["success"])
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['overall']['total_time']:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {results['overall']['total_tests']}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {results['overall']['passed_tests']}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {results['overall']['failed_tests']}")
    
    success_rate = (results['overall']['passed_tests'] / results['overall']['total_tests'] * 100) if results['overall']['total_tests'] > 0 else 0
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
    
    for category, tests in results.items():
        if category == "overall":
            continue
            
        print(f"\n{category.upper()}:")
        for test_name, test_result in tests.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result["success"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"  {test_result['description']}: {status} ({test_result['duration']:.2f}s)")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_file = "test_results.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ markdown –æ—Ç—á–µ—Ç–∞
    create_markdown_report(results)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if results['overall']['failed_tests'] == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è –ü–†–û–í–ê–õ–ï–ù–û –¢–ï–°–¢–û–í: {results['overall']['failed_tests']}")
        return 1

def create_markdown_report(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ markdown –æ—Ç—á–µ—Ç–∞"""
    report_content = f"""# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã

**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}  
**–û–±—â–µ–µ –≤—Ä–µ–º—è:** {results['overall']['total_time']:.2f} —Å–µ–∫—É–Ω–¥

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** {results['overall']['total_tests']}
- **–ü—Ä–æ–π–¥–µ–Ω–æ:** {results['overall']['passed_tests']}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** {results['overall']['failed_tests']}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:** {(results['overall']['passed_tests'] / results['overall']['total_tests'] * 100) if results['overall']['total_tests'] > 0 else 0:.1f}%

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

### Unit —Ç–µ—Å—Ç—ã
"""
    
    for test_name, test_result in results['unit_tests'].items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result["success"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        report_content += f"- **{test_result['description']}:** {status} ({test_result['duration']:.2f}s)\n"
    
    report_content += "\n### Integration —Ç–µ—Å—Ç—ã\n"
    for test_name, test_result in results['integration_tests'].items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result["success"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        report_content += f"- **{test_result['description']}:** {status} ({test_result['duration']:.2f}s)\n"
    
    report_content += "\n### Load —Ç–µ—Å—Ç—ã\n"
    for test_name, test_result in results['load_tests'].items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result["success"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        report_content += f"- **{test_result['description']}:** {status} ({test_result['duration']:.2f}s)\n"
    
    report_content += "\n### Security —Ç–µ—Å—Ç—ã\n"
    for test_name, test_result in results['security_tests'].items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result["success"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        report_content += f"- **{test_result['description']}:** {status} ({test_result['duration']:.2f}s)\n"
    
    report_content += f"""

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

"""
    
    if results['overall']['failed_tests'] == 0:
        report_content += "üéâ **–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!**\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É."
    else:
        report_content += f"‚ö†Ô∏è **–ü–†–û–í–ê–õ–ï–ù–û –¢–ï–°–¢–û–í: {results['overall']['failed_tests']}**\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ markdown –æ—Ç—á–µ—Ç–∞
    with open("TEST_REPORT.md", 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print("üìÑ Markdown –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: TEST_REPORT.md")

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

